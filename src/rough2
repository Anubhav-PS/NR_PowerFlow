import java.math.BigDecimal;
import java.math.RoundingMode;

public class Main {


    // Magnitude of Voltage |Y|
    static float[][] Y_Matrix;
    static void form_Y_Matrix(float y1, float y2, float y3) {
        Y_Matrix = new float[][]{{y1 + y2, y1, y2}
                , {y1, y1 + y3, y3},
                {y2, y3, y3+y2}};
    }

    // Theta_Matrix
    static float[][] Theta_Matrix;
    static void form_Theta_Matrix() {
        float PI = (float) Math.PI;
        Theta_Matrix = new float[][]{{-PI / 2, PI / 2, PI / 2},
                {PI / 2, -PI / 2, PI / 2},
                {PI / 2, PI / 2, -PI / 2}};
    }

    // bus complex load voltage
    static float[] Vol = new float[]{1, 1, 1.01f};  // Vol[0] -> V1

    // bus complex load angle
    static float[] Angle = new float[]{0, 0, 0};  // Angle[0] -> D1

    //active power demand of the 3 bus
    static float[] power = new float[]{0, -0.9f, 0.6f};

    //reactive power demand of the 3 bus
    static float[] q = new float[]{0, -0.5f, 0};

    static float[] f = new float[]{0f, 0f, 0f};


    //Jacobian Matrix
    static float[][] Jacobian_Matrix = new float[3][3];

    //matrix declaration to get the inverse of the a matrix
    static float[][] Transpose_Matrix = new float[3][3];
    static float[][] Adjoint_Matrix = new float[3][3];
    static float[][] Inverse_Matrix = new float[3][3];

    public static void main(String[] args) {


        form_Y_Matrix(10, 4, 5);
        form_Theta_Matrix();

        for(int i=0;i<3;i++){
            for(int j=0;j<3;j++){
                float c1 = Y_Matrix[i][j];
                System.out.printf("%-20f",c1);
            }
            System.out.println();
        }
        PowerFlow pf = new PowerFlow(34,56,78);

        System.out.println(fOf("P2"));
        System.out.println(fOf("P3"));
        System.out.println(fOf("Q2"));
        System.out.println("------------------------------------------------------------------------");
        for (int i = 0; i < 5; i++) {
            f[0] = fOf("P2");
            f[1] = fOf("P3");
            f[2] = fOf("Q2");
            form_Jacobian_Matrix();
            for (int row = 0; row < 3; row++) {
                for (int col = 0; col < 3; col++) {
                    System.out.print(Jacobian_Matrix[row][col] + "\t\t");
                }
                System.out.println();
            }
            getNthIterationMatrix();
            System.out.println("---------------------------------------------------");
        }

        System.out.println("*************************");
        System.out.println(Vol[1]);
        System.out.println(roundOff(Angle[1] * 180 / Math.PI));
        System.out.println(roundOff(Angle[2] * 180 / Math.PI));


    }

    static float fOf(String eq) {
        double result = 0.0;
        if (eq.toCharArray()[0] == 'P') {  //if eq is active power demand
            if (eq.toCharArray()[1] == '1') {
                for (int i = 0; i < 3; i++) {
                    result += Y_Matrix[0][i] * Vol[i] * Vol[0] * Cos(Theta_Matrix[0][i] + Angle[i] - Angle[0]);
                }
                result -= power[0];
                return roundOff(result);
            } else if (eq.toCharArray()[1] == '2') {
                for (int i = 0; i < 3; i++) {
                    result += Y_Matrix[1][i] * Vol[i] * Vol[1] * Cos(Theta_Matrix[1][i] + Angle[i] - Angle[1]);
                }
                result -= power[1];
                return roundOff(result);
            } else if (eq.toCharArray()[1] == '3') {
                for (int i = 0; i < 3; i++) {
                    result += Y_Matrix[2][i] * Vol[i] * Vol[2] * Cos(Theta_Matrix[2][i] + Angle[i] - Angle[2]);
                }
                result -= power[2];
                return roundOff(result);
            }
        } else if (eq.toCharArray()[0] == 'Q') {  // if eq is reactive power demand
            if (eq.toCharArray()[1] == '1') {
                for (int i = 0; i < 3; i++) {
                    result += Y_Matrix[0][i] * Vol[i] * Vol[0] * Sin(Theta_Matrix[0][i] + Angle[i] - Angle[0]);
                    result = result * (-1);
                }
                result -= q[0];
                return roundOff(result);
            } else if (eq.toCharArray()[1] == '2') {
                for (int i = 0; i < 3; i++) {
                    result += Y_Matrix[1][i] * Vol[i] * Vol[1] * Sin(Theta_Matrix[1][i] + Angle[i] - Angle[1]);
                    result = result * (-1);
                }
                result -= q[1];
                return roundOff(result);
            } else if (eq.toCharArray()[1] == '3') {
                for (int i = 0; i < 3; i++) {
                    result += Y_Matrix[2][i] * Vol[i] * Vol[2] * Sin(Theta_Matrix[2][i] + Angle[i] - Angle[2]);
                    result = result * (-1);
                }
                result -= q[2];
                return roundOff(result);
            }
        }
        System.out.println("Invalid Input");
        return roundOff(result);
    }



    static void form_Jacobian_Matrix() {

        double value = 0.0;


        //J11
        value = Y_Matrix[1][0] * Vol[0] * Vol[1] * Sin(Theta_Matrix[1][0] + Angle[0] - Angle[1])
                + Y_Matrix[1][2] * Vol[2] * Vol[1] * Sin(Theta_Matrix[1][2] + Angle[2] - Angle[1]);
        Jacobian_Matrix[0][0] = roundOff(value);

        //J12
        value = Y_Matrix[1][2] * Vol[2] * Vol[1] * Sin(Theta_Matrix[1][2] + Angle[2] - Angle[1])
                * -1;
        Jacobian_Matrix[0][1] = roundOff(value);

        //J13
        value = Y_Matrix[1][0] * Vol[0] * Cos(Theta_Matrix[1][0] + Angle[0] - Angle[1])
                + (2 * Y_Matrix[1][1] * Vol[1] * Cos(Theta_Matrix[1][1]))
                + Y_Matrix[1][2] * Vol[2] * Cos(Theta_Matrix[1][2] + Angle[2] - Angle[1]);
        Jacobian_Matrix[0][2] = roundOff(value);

        //J21
        value = Y_Matrix[2][1] * Vol[1] * Vol[2] * Sin(Theta_Matrix[2][1] + Angle[1] - Angle[2]) * -1;
        Jacobian_Matrix[1][0] = roundOff(value);

        //J22
        value = Y_Matrix[2][0] * Vol[0] * Vol[2] * Sin(Theta_Matrix[2][0] + Angle[0] - Angle[2])
                + Y_Matrix[2][1] * Vol[1] * Vol[2] * Sin(Theta_Matrix[2][1] + Angle[1] - Angle[2]);
        Jacobian_Matrix[1][1] = roundOff(value);

        //J23
        value = Y_Matrix[2][1] * Vol[2] * Cos(Theta_Matrix[2][1] + Angle[1] - Angle[2]);
        Jacobian_Matrix[1][2] = roundOff(value);

        //J31
        value = Y_Matrix[1][0] * Vol[0] * Vol[1] * Cos(Theta_Matrix[1][0] + Angle[0] - Angle[1])
                + Y_Matrix[1][2] * Vol[2] * Vol[1] * Cos(Theta_Matrix[1][2] + Angle[2] - Angle[1]);
        Jacobian_Matrix[2][1] = roundOff(value);

        //J32
        value = (Y_Matrix[1][2] * Vol[2] * Vol[1] * Cos(Theta_Matrix[1][2] + Angle[2] - Angle[1])) * -1;
        Jacobian_Matrix[2][1] = roundOff(value);

        //J33
        value = (Y_Matrix[1][0] * Vol[0] * Sin(Theta_Matrix[1][0] + Angle[0] - Angle[1])
                + (2 * Y_Matrix[1][1] * Vol[1] * Sin(Theta_Matrix[1][1]))
                + Y_Matrix[1][2] * Vol[2] * Sin(Theta_Matrix[1][2] + Angle[2] - Angle[1])) * -1;
        Jacobian_Matrix[2][2] = roundOff(value);

    }

    static float getDeterminantOfMatrix() {
        float determinant, x, y, z;
        x = (Jacobian_Matrix[0][0] * (Jacobian_Matrix[1][1] * Jacobian_Matrix[2][2]
                - Jacobian_Matrix[1][2] * Jacobian_Matrix[2][1]));
        y = (Jacobian_Matrix[0][1] * (Jacobian_Matrix[1][0] * Jacobian_Matrix[2][2]
                - Jacobian_Matrix[1][2] * Jacobian_Matrix[2][0]));
        z = (Jacobian_Matrix[0][2] * (Jacobian_Matrix[1][0] * Jacobian_Matrix[2][1]
                - Jacobian_Matrix[1][1] * Jacobian_Matrix[2][0]));
        determinant = x - y + z;
        return determinant;
    }

    static void getTransposeOfMatrix() {
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                Transpose_Matrix[i][j] = Jacobian_Matrix[j][i];
            }
        }
    }

    static void getAdjointMatrix() {
        //first row
        Adjoint_Matrix[0][0] = Transpose_Matrix[1][1] * Transpose_Matrix[2][2] - Transpose_Matrix[1][2] * Transpose_Matrix[2][1];
        Adjoint_Matrix[0][1] = Transpose_Matrix[1][0] * Transpose_Matrix[2][2] - Transpose_Matrix[1][2] * Transpose_Matrix[2][0];
        Adjoint_Matrix[0][2] = Transpose_Matrix[1][0] * Transpose_Matrix[2][1] - Transpose_Matrix[1][1] * Transpose_Matrix[2][0];
        //second row
        Adjoint_Matrix[1][0] = Transpose_Matrix[0][1] * Transpose_Matrix[2][2] - Transpose_Matrix[0][2] * Transpose_Matrix[2][1];
        Adjoint_Matrix[1][1] = Transpose_Matrix[0][0] * Transpose_Matrix[2][2] - Transpose_Matrix[0][2] * Transpose_Matrix[2][0];
        Adjoint_Matrix[1][2] = Transpose_Matrix[0][0] * Transpose_Matrix[2][1] - Transpose_Matrix[0][1] * Transpose_Matrix[2][0];
        //third row
        Adjoint_Matrix[2][0] = Transpose_Matrix[0][1] * Transpose_Matrix[1][2] - Transpose_Matrix[0][2] * Transpose_Matrix[1][1];
        Adjoint_Matrix[2][1] = Transpose_Matrix[0][0] * Transpose_Matrix[1][2] - Transpose_Matrix[0][2] * Transpose_Matrix[1][0];
        Adjoint_Matrix[2][2] = Transpose_Matrix[0][0] * Transpose_Matrix[1][1] - Transpose_Matrix[0][1] * Transpose_Matrix[1][0];

        //get the cofactors
        Adjoint_Matrix[0][1] = Adjoint_Matrix[0][1] * -1;
        Adjoint_Matrix[1][0] = Adjoint_Matrix[1][0] * -1;
        Adjoint_Matrix[1][2] = Adjoint_Matrix[1][2] * -1;
        Adjoint_Matrix[2][1] = Adjoint_Matrix[2][1] * -1;

    }

    static void getInverseMatrix() {
        float det = getDeterminantOfMatrix();
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                Inverse_Matrix[i][j] = (1 / det) * Adjoint_Matrix[i][j];
            }
        }
    }

    static void getNthIterationMatrix() {

        getTransposeOfMatrix();
        getAdjointMatrix();
        getInverseMatrix();

        float[] resultantProduct = new float[]{0f, 0f, 0f};

        // Multiply the two marices
        for (int i = 0; i < 3; i++) {
            for (int k = 0; k < 3; k++)
                resultantProduct[i] += Inverse_Matrix[i][k] * f[k];
        }

        Angle[1] = Angle[1] - resultantProduct[0];
        Angle[2] = Angle[2] - resultantProduct[1];
        Vol[1] = Vol[1] - resultantProduct[2];


    }



}
