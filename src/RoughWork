# solving power flow equation for a 3 bus sytem using newton raphson method

import math
import numpy
from numpy import matrix
from numpy import *
import sympy
from sympy import cos,sin,Matrix
from sympy import *

def y_matix(y1,y2,y3):
    #forming and returning y matrix  // Admitance matrix Y
    Y= [[y1+y2,y1,y2],
       [y1,y1+y3,y3],
       [y2,y3,y2+y3]]
    return Y


# theta matrix
pi = math.pi
t = [[-pi/2,pi/2,pi/2],
    [pi/2,-pi/2,pi/2],
    [pi/2,pi/2,-pi/2]]

Y = y_matix(10,4,5)                   // INPUT ADMITANCE AS PARAMETERS  // y = 1/z

// phase angle
d1 = 0
d2 = 0
d3 = 0
// voltage in rectangular coordinates (slack bus)
v1 = 1
v2 = 1
v3 = 1.01
--------------------
p2 = -0.9
q2 = -0.5
p3 = 1.3

--------------------
ukv = [d2,d3,v2]   (unknown variables)

d1,d2,d3, = symbols('d2,d3,d3')
v1,v2,v3 = symbols('v1,v2,v3')



fp2 = Y[1][0]v1*v2*cos(t[1][0]+d1-d2) + Y[1][1]*v2*2*cos(t[1][1]) + Y[1][2]*v3*v2*cos(t[1][2]+d3-d2) - p2
fq2 = -Y[1][0]v1*v2*sin(t[1][0]+d1-d2) - Y[1][1]*v2*2*sin(t[1][1]) - Y[1][2]*v3*v2*sin(t[1][2]+d3-d2) - q2
fp3 = Y[2][0]v1*v3*cos(t[2][0]+d1-d3) + Y[2][1]*v2*v3*cos(t[2][1]+d2-d3) + Y[2][2]*v3*2*cos(t[2][2]) - p3


print("__________the power flow equations are:________________")
print(fp2)
print(fq2)
print(fp3)

x = Matrix([fp2,fq2,fp3])
y = Matrix([d2,d3,v2])
jac = x.jacobian(y)

fx = x.subs([(v1,1),(v2,1),(v3,1.01),(d1,0),(d2,0),(d3,0)])
J = jac.subs([(v1,1),(v2,1),(v3,1.01),(d1,0),(d2,0),(d3,0)])

print("the jacobian matrix is :")
print(J)